name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DEVELOPER_DIR: /Applications/Xcode_16.1.app/Contents/Developer

jobs:
  test:
    name: Test
    runs-on: macos-15

    strategy:
      matrix:
        scheme: [Kalendar]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: Cache derived data
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-derived-data-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-derived-data-

      - name: Cache SwiftPM (global)
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-swiftpm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swiftpm-

      - name: Show available destinations
        run: |
          xcodebuild -project Kalendar.xcodeproj -scheme ${{ matrix.scheme }} -showdestinations || true
          xcrun simctl list runtimes
          xcrun simctl list devices available

      - name: Pick iOS Simulator
        id: pick-sim
        shell: bash
        run: |
          # Try preferred devices first, then fallback to the first available iPhone
          PREFERRED=("iPhone 16" "iPhone 15" "iPhone SE (3rd generation)" "iPhone 14" "iPhone 13")
          for NAME in "${PREFERRED[@]}"; do
            UDID=$(xcrun simctl list devices available | awk -v n="$NAME" -F '[()]' '$0 ~ n {print $2; exit}')
            if [ -n "$UDID" ]; then
              echo "Picked $NAME ($UDID)"
              echo "udid=$UDID" >> "$GITHUB_OUTPUT"
              echo "name=$NAME" >> "$GITHUB_OUTPUT"
              break
            fi
          done
          if [ -z "${UDID:-}" ]; then
            # Any available iPhone
            UDID=$(xcrun simctl list devices available | awk -F '[()]' '/iPhone/ {print $2; exit}')
            NAME=$(xcrun simctl list devices available | awk -F '[()]' '/iPhone/ {print $1; sub(/^.*?iPhone/,"iPhone",$1); gsub(/^[[:space:]]+|[[:space:]]+$/,"",$1); print $1; exit}')
            if [ -z "$UDID" ]; then
              echo "No available iPhone simulators found" >&2
              exit 1
            fi
            echo "Picked $NAME ($UDID)"
            echo "udid=$UDID" >> "$GITHUB_OUTPUT"
            echo "name=$NAME" >> "$GITHUB_OUTPUT"
          fi

      - name: Boot simulator
        run: |
          xcrun simctl boot "${{ steps.pick-sim.outputs.udid }}" || true
          xcrun simctl bootstatus "${{ steps.pick-sim.outputs.udid }}" -b -s

      - name: Test
        run: |
          echo "Running unit tests only (no build required)..."
          xcodebuild \
            -project Kalendar.xcodeproj \
            -scheme ${{ matrix.scheme }} \
            -configuration Debug \
            -destination "id=${{ steps.pick-sim.outputs.udid }}" \
            test \
            -only-testing:KalendarTests \
            CODE_SIGNING_ALLOWED=NO \
            | xcpretty && exit ${PIPESTATUS[0]}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results-${{ matrix.scheme }}
          path: |
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Test/*.xcresult

  widget-test:
    name: Widget Tests
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: Pick iOS Simulator
        id: pick-sim
        shell: bash
        run: |
          UDID=$(xcrun simctl list devices available | awk -F '[()]' '/iPhone/ {print $2; exit}')
          if [ -z "$UDID" ]; then
            echo "No available iPhone simulators found" >&2
            exit 1
          fi
          echo "udid=$UDID" >> "$GITHUB_OUTPUT"

      - name: Boot simulator
        run: |
          xcrun simctl boot "${{ steps.pick-sim.outputs.udid }}" || true
          xcrun simctl bootstatus "${{ steps.pick-sim.outputs.udid }}" -b -s

      - name: Build app (includes widget extensions)
        run: |
          xcodebuild \
            -project Kalendar.xcodeproj \
            -scheme Kalendar \
            -destination "id=${{ steps.pick-sim.outputs.udid }}" \
            -configuration Debug \
            build \
            CODE_SIGNING_ALLOWED=NO \
            | xcpretty && exit ${PIPESTATUS[0]}

  lint:
    name: Lint
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: Install SwiftLint
        run: brew install swiftlint

      - name: Run SwiftLint
        run: swiftlint lint --reporter github-actions-logging

      - name: Analyze Code
        run: |
          xcodebuild \
            -project Kalendar.xcodeproj \
            -scheme Kalendar \
            -configuration Debug \
            analyze \
            CODE_SIGNING_ALLOWED=NO \
            | xcpretty && exit ${PIPESTATUS[0]}

  security:
    name: Security Scan
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run security scan
        run: |
          # Check for hardcoded secrets
          if grep -r "password\|secret\|key\|token" --include="*.swift" --include="*.m" --include="*.h" . | grep -v "// Test" | grep -v "placeholder"; then
            echo "❌ Potential hardcoded secrets found"
            exit 1
          else
            echo "✅ No hardcoded secrets found"
          fi

      - name: Check Info.plist files
        run: |
          find . -name "Info.plist" -exec plutil -lint {} \;

  coverage:
    name: Code Coverage
    runs-on: macos-15
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: Pick iOS Simulator
        id: pick-sim
        shell: bash
        run: |
          UDID=$(xcrun simctl list devices available | awk -F '[()]' '/iPhone/ {print $2; exit}')
          if [ -z "$UDID" ]; then
            echo "No available iPhone simulators found" >&2
            exit 1
          fi
          echo
